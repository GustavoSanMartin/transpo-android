// Generated by Dagger (https://google.github.io/dagger).
package ca.llamabagel.transpo.di;

import com.jakewharton.retrofit2.adapter.kotlin.coroutines.CoroutineCallAdapterFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Converter;

public final class DaggerCoreComponent implements CoreComponent {
  private final CoreModule coreModule;

  private Provider<Converter.Factory> provideSerializationConverterFactoryProvider;

  private DaggerCoreComponent(CoreModule coreModuleParam) {
    this.coreModule = coreModuleParam;
    initialize(coreModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CoreComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final CoreModule coreModuleParam) {
    this.provideSerializationConverterFactoryProvider =
        DoubleCheck.provider(
            CoreModule_ProvideSerializationConverterFactoryFactory.create(coreModuleParam));
  }

  @Override
  public CoroutineCallAdapterFactory provideCallAdapterFactory() {
    return CoreModule_ProvideCallAdapterFactoryFactory.proxyProvideCallAdapterFactory(coreModule);
  }

  @Override
  public Converter.Factory provideConverterFactory() {
    return provideSerializationConverterFactoryProvider.get();
  }

  public static final class Builder {
    private CoreModule coreModule;

    private Builder() {}

    public Builder coreModule(CoreModule coreModule) {
      this.coreModule = Preconditions.checkNotNull(coreModule);
      return this;
    }

    public CoreComponent build() {
      if (coreModule == null) {
        this.coreModule = new CoreModule();
      }
      return new DaggerCoreComponent(coreModule);
    }
  }
}
