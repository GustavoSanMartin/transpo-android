// Generated by Dagger (https://google.github.io/dagger).
package ca.llamabagel.transpo.di;

import ca.llamabagel.transpo.data.db.TransitDatabase;
import com.squareup.sqldelight.db.SqlDriver;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class TransitDatabaseModule_ProvideTransitDatabaseFactory
    implements Factory<TransitDatabase> {
  private final TransitDatabaseModule module;

  private final Provider<SqlDriver> sqlDriverProvider;

  public TransitDatabaseModule_ProvideTransitDatabaseFactory(
      TransitDatabaseModule module, Provider<SqlDriver> sqlDriverProvider) {
    this.module = module;
    this.sqlDriverProvider = sqlDriverProvider;
  }

  @Override
  public TransitDatabase get() {
    return proxyProvideTransitDatabase(module, sqlDriverProvider.get());
  }

  public static TransitDatabaseModule_ProvideTransitDatabaseFactory create(
      TransitDatabaseModule module, Provider<SqlDriver> sqlDriverProvider) {
    return new TransitDatabaseModule_ProvideTransitDatabaseFactory(module, sqlDriverProvider);
  }

  public static TransitDatabase proxyProvideTransitDatabase(
      TransitDatabaseModule instance, SqlDriver sqlDriver) {
    return Preconditions.checkNotNull(
        instance.provideTransitDatabase(sqlDriver),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
